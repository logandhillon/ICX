plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'net.logandhillon'
version '0.9.6-alpha'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'net.logandhillon.icx'
    mainClass = 'net.logandhillon.icx.ICX'
}

javafx {
    version = '22-ea+11'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    implementation("org.apache.logging.log4j:log4j-core:2.24.0")
    compileOnly('org.jspecify:jspecify:1.0.0')  // fixes "error: module not found: org.jspecify"

    implementation("org.bouncycastle:bcprov-jdk15on:1.70")
    implementation("org.bouncycastle:bcpkix-jdk15on:1.70")
}

test {
    useJUnitPlatform()
}

gradle.projectsLoaded {
    def runDir = file("$rootDir/run")
    def clientDir = file("$runDir/client")
    def serverDir = file("$runDir/server")

    if (!runDir.exists()) runDir.mkdirs()
    if (!clientDir.exists()) clientDir.mkdirs()
    if (!serverDir.exists()) serverDir.mkdirs()
}

def jdkDir = file("${buildDir}/jdks")
def jdkVersion = "21"

def downloadJdk(String jdkUrl, File destinationDir) {
    destinationDir.mkdirs()
    def jdkArchive = new File(destinationDir, jdkUrl.substring(jdkUrl.lastIndexOf('/') + 1))

    if (!jdkArchive.exists()) {
        println "Downloading JDK from: $jdkUrl"
        new URL(jdkUrl).withInputStream { downloadStream ->
            jdkArchive.withOutputStream { outputStream ->
                outputStream << downloadStream
            }
        }
        println "Downloaded: ${jdkArchive.name}"
    }

    def tempDir = new File(destinationDir, "temp")
    if (jdkArchive.name.endsWith('.zip')) {
        copy {
            from zipTree(jdkArchive)
            into tempDir
        }
    } else if (jdkArchive.name.endsWith('.tar.gz')) {
        copy {
            from tarTree(resources.gzip(jdkArchive))
            into tempDir
        }
    }

    def extractedDir = tempDir.listFiles()?.find { it.isDirectory() }
    if (extractedDir) {
        def finalDir = new File(destinationDir, "bin")
        extractedDir.renameTo(finalDir)
    }

    delete(tempDir)
}

task downloadJdks {
    doLast {
        downloadJdk("https://corretto.aws/downloads/latest/amazon-corretto-${jdkVersion}-x64-linux-jdk.tar.gz", file("${jdkDir}/linux"))
        downloadJdk("https://corretto.aws/downloads/latest/amazon-corretto-${jdkVersion}-x64-windows-jdk.zip", file("${jdkDir}/win"))
        downloadJdk("https://corretto.aws/downloads/latest/amazon-corretto-${jdkVersion}-aarch64-macos-jdk.tar.gz", file("${jdkDir}/mac-aarch64"))
        downloadJdk("https://corretto.aws/downloads/latest/amazon-corretto-${jdkVersion}-x64-macos-jdk.tar.gz", file("${jdkDir}/mac-x64"))
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${name}-${version}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    launcher {
        name = 'ICX'
    }

    targetPlatform("linux") {
        jdkHome = file("${jdkDir}/linux/bin")
    }

    targetPlatform("win") {
        jdkHome = file("${jdkDir}/win/bin")
    }

    targetPlatform("mac-aarch64") {
        jdkHome = file("${jdkDir}/mac-aarch64/bin/Contents/Home")
    }

    targetPlatform("mac-x64") {
        jdkHome = file("${jdkDir}/mac-x64/bin/Contents/Home")
    }
}

jlinkZip {
    group = 'distribution'
}